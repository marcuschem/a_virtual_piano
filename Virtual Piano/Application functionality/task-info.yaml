type: edu
files:
- name: src/index.html
  visible: true
  text: |
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>Hello, World!</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: hstest/test.js
  visible: false
  text: |-
    const path = require('path');
    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');
    const {StageTest, correct, wrong} = require("hs-test-web")

    class Test extends StageTest {

        page = this.getPage(pagePath)

        tests = [

            this.page.execute(async () => {
                this.realLog = console.log;
                this.userPrinted = [];
                console.log = (x) => {
                    this.userPrinted.push(x);
                    this.realLog(x);
                };
                return correct()
            }),

            // Test #1 - check all keys are pressed
            // TODO FIXED 09.10.2020

            this.page.execute(() => {
                let keys = ['a', 's', 'd', 'f', 'g', 'h', 'j'];

                for (let key of keys) {
                    this.realLog("Before: " + JSON.stringify(this.userPrinted));
                    this.press(key);
                    this.realLog("After: " + JSON.stringify(this.userPrinted));

                    if (this.userPrinted.length !== 1) {
                        return wrong(
                            `When the user presses a key, you should log a single message, ` +
                            `found ${this.userPrinted.length} messages`
                        )
                    }

                    let elem = this.userPrinted.pop();
                    if (!elem.toString().toLowerCase().includes(`'${key}'`)) {
                        return wrong(
                            `When the user pressed a key "${key}", ` +
                            `The output message must include '${key}'\n` +
                            `You printed:\n` +
                            `"${elem}"`
                        );
                    }
                }

                return correct()
            }),
            // Test #2 - check div element with class container + 7 elements inside
            this.page.execute(() => {
                let containerElements = document.getElementsByClassName('container');
                if (containerElements.length === 0) {
                    return wrong(`Cannot find element with class 'container'`);
                } else if (containerElements.length > 1) {
                    return wrong(`Found ${containerElements.length} elements with class 'container'` +
                        `, the page should contain just a single such element.`);
                }

                let container = containerElements[0];
                this.div = container;

                let contName = container.nodeName.toLowerCase();
                if (contName !== 'div') {
                    return wrong(`Cannot find 'div' element with class 'container'.`);
                }

                let containerNodes = Array.from(container.childNodes);
                this.innerDivElements = containerNodes.filter(
                    e => e.nodeType === Node.ELEMENT_NODE);

                let len = this.innerDivElements.length;

                return len === 7 ?
                    correct() :
                    wrong(`Div with class 'container' should contain 7 elements, found: ${len}`)
            }),

            // Test #3 - check if all 7 elements are <kbd> elements
            this.page.execute(() => {
                let i = 0;
                for (let elem of this.innerDivElements) {
                    i++;
                    elem = elem.nodeName.toLowerCase();
                    if (elem !== 'kbd') {
                        return wrong(`Element #${i} is not <kbd> element, it's <${elem}>`);
                    }
                }
                return correct();
            }),

            // Test #4 - check if all keys are presented
            this.page.execute(() => {
                let expectedKeySet = new Set();

                expectedKeySet.add('A');
                expectedKeySet.add('S');
                expectedKeySet.add('D');
                expectedKeySet.add('F');
                expectedKeySet.add('G');
                expectedKeySet.add('H');
                expectedKeySet.add('J');

                let actualKeySet = new Set();

                let buttons = document.querySelectorAll('kbd');

                for (let button of buttons) {
                    actualKeySet.add(button.textContent)
                }

                const setsEquals = actualKeySet.size === expectedKeySet.size
                    && [...actualKeySet].every(value => expectedKeySet.has(value));

                if (!setsEquals) {
                    return wrong(`The names of your keys are incorrect. It must be: A, S, D, F, G, H, J`);
                }

                return correct();
            }),

            // Test #5 - check if all 7 elements contain a single letter
            this.page.execute(() => {
                let i = 0;
                for (let elem of this.innerDivElements) {
                    i++;
                    elem = elem.innerHTML;
                    if (elem.length === 0) {
                        return wrong(`Element #${i} is empty, but should contain a single letter.`);
                    } else if (elem.length > 1) {
                        return wrong(`Element #${i} contains ${elem.length} symbols, ` +
                            `but should contain a single letter. The text inside element is:\n"${elem}"`);
                    }
                }
                return correct();
            }),

            // Test 6 - Test if all 7 elements have the same top y-coordinate
            // (located on a single horizontal line)
            this.page.execute(() => {
                let referenceTop = this.innerDivElements[0].getBoundingClientRect().top;
                let i = 0;
                for (let elem of this.innerDivElements) {
                    i++;
                    let currTop = elem.getBoundingClientRect().top;
                    if (currTop !== referenceTop) {
                        return wrong(`Looks like element #1 and element #${i} ` +
                            `don't have the same top y coordinate. ` +
                            `All 7 elements should be located on a single horizontal line.`)
                    }
                }
                return correct();
            }),

            // Test 7 - Test if all 7 elements are located in the middle
            this.page.execute(() => {
                let width = window.innerWidth;
                let height = window.innerHeight;

                let mostLeftPx = this.innerDivElements[0].getBoundingClientRect().left;
                let mostRightPx = this.innerDivElements[6].getBoundingClientRect().right;

                let freeSpaceOnLeft = mostLeftPx;
                let freeSpaceOnRight = width - mostRightPx;
                let freeSpaceOnTop = this.innerDivElements[0].getBoundingClientRect().top;
                let freeSpaceOnBottom = this.innerDivElements[0].getBoundingClientRect().bottom;

                if (freeSpaceOnLeft < width / 10) {
                    return wrong("There should be at least 10% " +
                        "free space to the left of the piano. Are you sure you positioned the piano in the center?")
                }

                if (freeSpaceOnRight < width / 10) {
                    return wrong("There should be at least 10% " +
                        "free space to the right of the piano. Are you sure you positioned the piano in the center?")
                }

                if (freeSpaceOnTop < height / 10) {
                    return wrong("There should be at least 10% " +
                        "free space above the piano. Are you sure you positioned the piano in the center?")
                }

                if (freeSpaceOnBottom < height / 10) {
                    return wrong("There should be at least 10% " +
                        "free space below the piano. Are you sure you positioned the piano in the center?")
                }
                return correct();
            }),

            // Test 8 - Test if all elements have border
            this.page.execute(() => {
                let i = 0;
                for (let elem of this.innerDivElements) {
                    i++;
                    let currBorder = window.getComputedStyle(elem).border;
                    if (currBorder.includes('0px')) {
                        return wrong(`Looks like piano's element #${i} ` +
                            `has no border. It should have a border.`);
                    }
                }
                return correct()
            }),

            // Test 9 - Test if all element's background color is white and
            // body's background in not white
            this.page.execute(() => {
                function getRealColor(elem) {
                    while (elem) {
                        let color = window.getComputedStyle(elem).backgroundColor;
                        if (color !== "rgba(0, 0, 0, 0)") {
                            let match = color.match(/^rgba?\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)(\s*,\s*\d+\.\d+)?\)$/i);
                            return {
                                red: Number(match[1]),
                                green: Number(match[2]),
                                blue: Number(match[3]),
                                hex: Number(match[1]) * 65536 + Number(match[2]) * 256 + Number(match[3])
                            };
                        }
                        elem = elem.parentElement;
                    }
                    return null;
                }

                console.log(document.body)
                let bodyBack = getRealColor(document.body);
                if (bodyBack === null) {
                    return wrong("Looks like body's background color is not set. " +
                        "It should be some non-white color.")
                }

                if (bodyBack.hex === 0xFFFFFF) {
                    return wrong("Looks like body's background color is white. " +
                        "It should be some non-white color.")
                }

                let i = 0;
                for (let elem of this.innerDivElements) {
                    i++;
                    let currColor = getRealColor(elem);
                    if (currColor.hex !== 0xFFFFFF) {
                        return wrong(`Looks like piano's element #${i} ` +
                            `have non-white background color. It should be colored white.`);
                    }
                }
                return correct()
            }),

            // // Test 10 - Test width, height
            this.page.execute(() => {
                let i = 0;
                for (let elem of this.innerDivElements) {
                    i++;
                    let currDisplay = window.getComputedStyle(elem).display;

                    let currWidth = window.getComputedStyle(elem).width;
                    if (currWidth === 'auto') {
                        return wrong(`Looks like piano's element #${i} ` +
                            `has width style = 'auto'. It should have some numeric value.`);
                    }

                    let currHeight = window.getComputedStyle(elem).height;
                    if (currHeight === 'auto') {
                        return wrong(`Looks like piano's element #${i} ` +
                            `has height style = 'auto'. It should have some numeric value.`);
                    }
                }
                return correct()
            }),

            // // Test 11 - Checking key distances between keys
            this.page.execute(() => {
                let buttons = document.querySelectorAll('kbd');

                let buttonA = null;
                let buttonS = null;

                for (let button of buttons) {
                    let buttonText = button.textContent || button.innerText;
                    if (buttonText.toLowerCase() === 'a') {
                        buttonA = button
                    }

                    if (buttonText.toLowerCase() === 's') {
                        buttonS = button
                    }
                }

                let coordinateA = buttonA.getBoundingClientRect().right;
                let coordinateS = buttonS.getBoundingClientRect().left;

                let distanceAS = Math.abs(coordinateA - coordinateS);

                if (distanceAS > 5) {
                    console.log(distanceAS);
                    return wrong(`Make sure there's no extra distance between your white keys. Also, check that the white keys do not overlap.`);
                }

                return correct()
            })
        ]
    }


    it('Test stage', async function () {
        try {
            this.timeout(30000)
        } catch (ignored) {
        }
        await new Test().runTests()
    }, 30000)
  learner_created: false
- name: src/style/css.css
  visible: true
  text: |-
    body {
        display: flex;
        flex-direction: column;
        align-items: center;
        align-self: center;
        align-content: center;
        justify-content: center;
        height: 600px;
        background-color: rgba(20, 20, 105, 1);
        border: none;
    }

    .container {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        align-self: center;
        justify-self: center;
        width: 50%;
        height: 10%;
    }

    .container > kbd {
        display: flex;
        justify-content: center;
        align-items: center;
        color: rgba(0, 0, 0, 1);
        background-color: rgba(255, 255, 255, 1);
        border: 2px rgba(0, 0, 0, 1) solid;
        width: calc(100% / 7);
        height: 100%;
    }
  learner_created: true
- name: src/style/normalize.css
  visible: true
  text: |-
    /*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */

    /* Document
       ========================================================================== */

    /**
     * 1. Correct the line height in all browsers.
     * 2. Prevent adjustments of font size after orientation changes in iOS.
     */

    html {
      line-height: 1.15; /* 1 */
      -webkit-text-size-adjust: 100%; /* 2 */
    }

    /* Sections
       ========================================================================== */

    /**
     * Remove the margin in all browsers.
     */

    body {
      margin: 0;
    }

    /**
     * Render the `main` element consistently in IE.
     */

    main {
      display: block;
    }

    /**
     * Correct the font size and margin on `h1` elements within `section` and
     * `article` contexts in Chrome, Firefox, and Safari.
     */

    h1 {
      font-size: 2em;
      margin: 0.67em 0;
    }

    /* Grouping content
       ========================================================================== */

    /**
     * 1. Add the correct box sizing in Firefox.
     * 2. Show the overflow in Edge and IE.
     */

    hr {
      box-sizing: content-box; /* 1 */
      height: 0; /* 1 */
      overflow: visible; /* 2 */
    }

    /**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */

    pre {
      font-family: monospace, monospace; /* 1 */
      font-size: 1em; /* 2 */
    }

    /* Text-level semantics
       ========================================================================== */

    /**
     * Remove the gray background on active links in IE 10.
     */

    a {
      background-color: transparent;
    }

    /**
     * 1. Remove the bottom border in Chrome 57-
     * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
     */

    abbr[title] {
      border-bottom: none; /* 1 */
      text-decoration: underline; /* 2 */
      text-decoration: underline dotted; /* 2 */
    }

    /**
     * Add the correct font weight in Chrome, Edge, and Safari.
     */

    b,
    strong {
      font-weight: bolder;
    }

    /**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */

    code,
    kbd,
    samp {
      font-family: monospace, monospace; /* 1 */
      font-size: 1em; /* 2 */
    }

    /**
     * Add the correct font size in all browsers.
     */

    small {
      font-size: 80%;
    }

    /**
     * Prevent `sub` and `sup` elements from affecting the line height in
     * all browsers.
     */

    sub,
    sup {
      font-size: 75%;
      line-height: 0;
      position: relative;
      vertical-align: baseline;
    }

    sub {
      bottom: -0.25em;
    }

    sup {
      top: -0.5em;
    }

    /* Embedded content
       ========================================================================== */

    /**
     * Remove the border on images inside links in IE 10.
     */

    img {
      border-style: none;
    }

    /* Forms
       ========================================================================== */

    /**
     * 1. Change the font styles in all browsers.
     * 2. Remove the margin in Firefox and Safari.
     */

    button,
    input,
    optgroup,
    select,
    textarea {
      font-family: inherit; /* 1 */
      font-size: 100%; /* 1 */
      line-height: 1.15; /* 1 */
      margin: 0; /* 2 */
    }

    /**
     * Show the overflow in IE.
     * 1. Show the overflow in Edge.
     */

    button,
    input { /* 1 */
      overflow: visible;
    }

    /**
     * Remove the inheritance of text transform in Edge, Firefox, and IE.
     * 1. Remove the inheritance of text transform in Firefox.
     */

    button,
    select { /* 1 */
      text-transform: none;
    }

    /**
     * Correct the inability to style clickable types in iOS and Safari.
     */

    button,
    [type="button"],
    [type="reset"],
    [type="submit"] {
      -webkit-appearance: button;
    }

    /**
     * Remove the inner border and padding in Firefox.
     */

    button::-moz-focus-inner,
    [type="button"]::-moz-focus-inner,
    [type="reset"]::-moz-focus-inner,
    [type="submit"]::-moz-focus-inner {
      border-style: none;
      padding: 0;
    }

    /**
     * Restore the focus styles unset by the previous rule.
     */

    button:-moz-focusring,
    [type="button"]:-moz-focusring,
    [type="reset"]:-moz-focusring,
    [type="submit"]:-moz-focusring {
      outline: 1px dotted ButtonText;
    }

    /**
     * Correct the padding in Firefox.
     */

    fieldset {
      padding: 0.35em 0.75em 0.625em;
    }

    /**
     * 1. Correct the text wrapping in Edge and IE.
     * 2. Correct the color inheritance from `fieldset` elements in IE.
     * 3. Remove the padding so developers are not caught out when they zero out
     *    `fieldset` elements in all browsers.
     */

    legend {
      box-sizing: border-box; /* 1 */
      color: inherit; /* 2 */
      display: table; /* 1 */
      max-width: 100%; /* 1 */
      padding: 0; /* 3 */
      white-space: normal; /* 1 */
    }

    /**
     * Add the correct vertical alignment in Chrome, Firefox, and Opera.
     */

    progress {
      vertical-align: baseline;
    }

    /**
     * Remove the default vertical scrollbar in IE 10+.
     */

    textarea {
      overflow: auto;
    }

    /**
     * 1. Add the correct box sizing in IE 10.
     * 2. Remove the padding in IE 10.
     */

    [type="checkbox"],
    [type="radio"] {
      box-sizing: border-box; /* 1 */
      padding: 0; /* 2 */
    }

    /**
     * Correct the cursor style of increment and decrement buttons in Chrome.
     */

    [type="number"]::-webkit-inner-spin-button,
    [type="number"]::-webkit-outer-spin-button {
      height: auto;
    }

    /**
     * 1. Correct the odd appearance in Chrome and Safari.
     * 2. Correct the outline style in Safari.
     */

    [type="search"] {
      -webkit-appearance: textfield; /* 1 */
      outline-offset: -2px; /* 2 */
    }

    /**
     * Remove the inner padding in Chrome and Safari on macOS.
     */

    [type="search"]::-webkit-search-decoration {
      -webkit-appearance: none;
    }

    /**
     * 1. Correct the inability to style clickable types in iOS and Safari.
     * 2. Change font properties to `inherit` in Safari.
     */

    ::-webkit-file-upload-button {
      -webkit-appearance: button; /* 1 */
      font: inherit; /* 2 */
    }

    /* Interactive
       ========================================================================== */

    /*
     * Add the correct display in Edge, IE 10+, and Firefox.
     */

    details {
      display: block;
    }

    /*
     * Add the correct display in all browsers.
     */

    summary {
      display: list-item;
    }

    /* Misc
       ========================================================================== */

    /**
     * Add the correct display in IE 10+.
     */

    template {
      display: none;
    }

    /**
     * Add the correct display in IE 10.
     */

    [hidden] {
      display: none;
    }
  learner_created: true
- name: src/js/JavaScript.js
  visible: true
  learner_created: true
- name: src/audio/D.mp3
  visible: true
  learner_created: true
- name: src/audio/J.mp3
  visible: true
  learner_created: true
- name: src/audio/G.mp3
  visible: true
  learner_created: true
- name: src/audio/H.mp3
  visible: true
  learner_created: true
- name: src/audio/F.mp3
  visible: true
  learner_created: true
- name: src/audio/A.mp3
  visible: true
  learner_created: true
- name: src/audio/S.mp3
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/9024#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 24 May 2022 01:17:33 UTC
record: 3
